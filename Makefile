.PHONY: clean_venv docs help venv style lint coverage view-docs install check-style check-types show-types
.DEFAULT_GOAL := help

define BROWSER_PYSCRIPT
import os, webbrowser, sys

from urllib.request import pathname2url

webbrowser.open(sys.argv[1])
endef
export BROWSER_PYSCRIPT

define PRINT_HELP_PYSCRIPT
import re, sys

for line in sys.stdin:
	match = re.match(r'^([a-zA-Z_-]+):.*?## (.*)$$', line)
	if match:
		target, help = match.groups()
		print("%-20s %s" % (target, help))
endef
export PRINT_HELP_PYSCRIPT

BROWSER := python -c "$$BROWSER_PYSCRIPT"

help:
	@python -c "$$PRINT_HELP_PYSCRIPT" < $(MAKEFILE_LIST)

clean-venv: ## Removes the venv and artifacts created by make venv (call .venv/)
	rm -rf .venv activate
	find -iname "*.pyc" -delete

clean-docs: ## Removes the sphinx autogenerated documentation
	rm -rf docs/_build docs/modules.rst docs/fluid_sim.rst

lint: ## check style with flake8
	flake8 --docstring-convention google fluid_sim tests

docs: ## generate Sphinx HTML documentation, including API docs
	rm -f docs/fluid_sim.rst
	rm -f docs/modules.rst
	sphinx-apidoc -o docs/ fluid_sim
	$(MAKE) -C docs clean
	$(MAKE) -C docs html

view-docs: docs ## Opens the docs in a browser after creating them
	$(BROWSER) docs/_build/html/index.html

install: clean ## install the package to the active Python's site-packages
	python setup.py install

venv: .venv/bin/activate ## create a python virtual environment with dependencies and packages installed. Only runs if setup.py or requirements_dex.txt changed

.venv/bin/activate: requirements_dev.txt setup.py requirements.txt
	$(shell which python3) -m venv .venv
	. .venv/bin/activate; \
	pip install -r requirements_dev.txt; \
	pip install -e .
	# pip install -e . has the same effect as pip instlal -r requirements.txt, except you also get the package here
	ln -sfn .venv/bin/activate activate
	@echo "Use 'source ./activate' to enter virtual environment"

style:  ## styles all code with yapf - google auto styling
	yapf -irp --style pep8 tests fluid_sim

check-style:  ## Tests that the style is consistent
	yapf -rd --style pep8 tests fluid_sim

check-types:  ## Does static type checking on the code
	mypy -p fluid_sim --ignore-missing-imports

show-types:  ## Shows the type checking report after running the type checker
	$(BROWSER) .mypyreport/index.html
